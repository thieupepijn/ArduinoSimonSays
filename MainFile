
//musical notes

#define NOTE_B0 31
#define NOTE_C1 33
#define NOTE_CS1 35
#define NOTE_D1 37
#define NOTE_DS1 39
#define NOTE_E1 41
#define NOTE_F1 44
#define NOTE_FS1 46
#define NOTE_G1 49
#define NOTE_GS1 52
#define NOTE_A1 55
#define NOTE_AS1 58
#define NOTE_B1 62
#define NOTE_C2 65
#define NOTE_CS2 69
#define NOTE_D2 73
#define NOTE_DS2 78
#define NOTE_E2 82
#define NOTE_F2 87
#define NOTE_FS2 93
#define NOTE_G2 98
#define NOTE_GS2 104
#define NOTE_A2 110
#define NOTE_AS2 117
#define NOTE_B2 123
#define NOTE_C3 131
#define NOTE_CS3 139
#define NOTE_D3 147
#define NOTE_DS3 156
#define NOTE_E3 165
#define NOTE_F3 175
#define NOTE_FS3 185
#define NOTE_G3 196
#define NOTE_GS3 208
#define NOTE_A3 220
#define NOTE_AS3 233
#define NOTE_B3 247
#define NOTE_C4 262
#define NOTE_CS4 277
#define NOTE_D4 294
#define NOTE_DS4 311
#define NOTE_E4 330
#define NOTE_F4 349
#define NOTE_FS4 370
#define NOTE_G4 392
#define NOTE_GS4 415
#define NOTE_A4 440
#define NOTE_AS4 466
#define NOTE_B4 494
#define NOTE_C5 523
#define NOTE_CS5 554
#define NOTE_D5 587
#define NOTE_DS5 622
#define NOTE_E5 659
#define NOTE_F5 698
#define NOTE_FS5 740
#define NOTE_G5 784
#define NOTE_GS5 831
#define NOTE_A5 880
#define NOTE_AS5 932
#define NOTE_B5 988
#define NOTE_C6 1047
#define NOTE_CS6 1109
#define NOTE_D6 1175
#define NOTE_DS6 1245
#define NOTE_E6 1319
#define NOTE_F6 1397
#define NOTE_FS6 1480
#define NOTE_G6 1568
#define NOTE_GS6 1661
#define NOTE_A6 1760
#define NOTE_AS6 1865
#define NOTE_B6 1976
#define NOTE_C7 2093
#define NOTE_CS7 2217
#define NOTE_D7 2349
#define NOTE_DS7 2489
#define NOTE_E7 2637
#define NOTE_F7 2794
#define NOTE_FS7 2960
#define NOTE_G7 3136
#define NOTE_GS7 3322
#define NOTE_A7 3520
#define NOTE_AS7 3729
#define NOTE_B7 3951
#define NOTE_C8 4186
#define NOTE_CS8 4435
#define NOTE_D8 4699
#define NOTE_DS8 4978


//pins
const int SPEAKER_PIN = 2;
const int LIGHT_PIN_BLUE = 3;
const int LIGHT_PIN_GREEN = 4;
const int LIGHT_PIN_YELLOW = 5;
const int LIGHT_PIN_RED = 6;
const int START_BUTTON_PIN = 7;
const int BUTTON_PIN_BLUE = 8;
const int BUTTON_PIN_GREEN = 9;
const int BUTTON_PIN_YELLOW = 10;
const int BUTTON_PIN_RED = 11;

enum gamestates { WAITING,
                  FLASHING,
                  RESPONDING
                };

gamestates GameState;

int LastPinNumber;
int NumberOfLights = 4;
int LightsFlashOrder[4];
int AnswerNumber = 0;
int LastButtonPressed = 0;


void setup() {
  // put your setup code here, to run once:

  pinMode(SPEAKER_PIN, OUTPUT);
  pinMode(LIGHT_PIN_BLUE, OUTPUT);
  pinMode(LIGHT_PIN_GREEN, OUTPUT);
  pinMode(LIGHT_PIN_YELLOW, OUTPUT);
  pinMode(LIGHT_PIN_RED, OUTPUT);
  pinMode(START_BUTTON_PIN, INPUT);
  pinMode(BUTTON_PIN_BLUE, INPUT);
  pinMode(BUTTON_PIN_GREEN, INPUT);
  pinMode(BUTTON_PIN_YELLOW, INPUT);
  pinMode(BUTTON_PIN_RED, INPUT);
  TurnOffAllLights();
  GameState = WAITING;
}

void loop() {
  // put your main code here, to run repeatedly:
  if (GameState == WAITING) {
    CheckStartButtonPressed();
  }

  if (GameState == FLASHING) {
    FlashLightsInRandomOrder();
    TurnOffAllLights();
    LastButtonPressed = 0;
    GameState = RESPONDING;
  }

  if (GameState == RESPONDING) {
    int responseButtonPressed = CheckResponseButtonPressed();
    if (AnswerNumber == 4)
    {
      MakeHappySound();
      FlashAllLights();
      AnswerNumber = 0;
      GameState = WAITING;
    }
    if ((responseButtonPressed > 0) and ((responseButtonPressed != LastButtonPressed) or (LastButtonPressed == 0))) {
      if (responseButtonPressed == (LightsFlashOrder[AnswerNumber]  + (NumberOfLights + 1))){ // (LastPinNumber + (NumberOfLights + 1))) {
        AnswerNumber++;
        LastButtonPressed = responseButtonPressed; 
      } else {
        MakeSadSound();
        AnswerNumber = 0;
        GameState = WAITING;
      }
    }
  }
}

void FlashLightsInRandomOrder() {
  LastPinNumber = 0;
  randomSeed(millis());
  for (int count = 1; count < 5; count++) {
    //zet alle lampjes en speaker uit
    TurnOffAllLights();
    //zet huidige lampje aan
    int pinNumber = random(LIGHT_PIN_BLUE, LIGHT_PIN_RED + 1);

    if (pinNumber == LastPinNumber) {
      count--;
      continue;
    } else {
      LastPinNumber = pinNumber;
      LightsFlashOrder[count - 1] = pinNumber;
      digitalWrite(pinNumber, HIGH);
      //even wachten
      delay(1000);
    }
  }
}

void FlashAllLights() {
  for (int teller = 1; teller < 4; teller++) {
    TurnOffAllLights();
    delay(500);
    TurnOnAllLights();
    delay(500);
  }
  TurnOffAllLights();
}

void TurnOffAllLights() {
  digitalWrite(LIGHT_PIN_BLUE, LOW);
  digitalWrite(LIGHT_PIN_GREEN, LOW);
  digitalWrite(LIGHT_PIN_YELLOW, LOW);
  digitalWrite(LIGHT_PIN_RED, LOW);
}

void TurnOnAllLights() {
  digitalWrite(LIGHT_PIN_BLUE, HIGH);
  digitalWrite(LIGHT_PIN_GREEN, HIGH);
  digitalWrite(LIGHT_PIN_YELLOW, HIGH);
  digitalWrite(LIGHT_PIN_RED, HIGH);
}

void CheckStartButtonPressed() {
  int buttonState = digitalRead(START_BUTTON_PIN);
  if (buttonState == HIGH) {
    GameState = FLASHING;
  }
}


int CheckResponseButtonPressed() {
  int blueButtonState = digitalRead(BUTTON_PIN_BLUE);
  int greenButtonState = digitalRead(BUTTON_PIN_GREEN);
  int yellowButtonState = digitalRead(BUTTON_PIN_YELLOW);
  int redButtonState = digitalRead(BUTTON_PIN_RED);

  if (blueButtonState == HIGH) {
    return BUTTON_PIN_BLUE;
  } else if (greenButtonState == HIGH) {
    return BUTTON_PIN_GREEN;
  } else if (yellowButtonState == HIGH) {
    return BUTTON_PIN_YELLOW;
  } else if (redButtonState == HIGH) {
    return BUTTON_PIN_RED;
  } else {
    return -1;
  }
}



void MakeHappySound() {
  for (int counter = 0; counter < 2; counter++) {
    tone(SPEAKER_PIN, NOTE_A5);
    delay(NOTE_CS1);
    tone(SPEAKER_PIN, NOTE_B5);
    delay(NOTE_CS1);
    tone(SPEAKER_PIN, NOTE_C5);
    delay(NOTE_CS1);
    tone(SPEAKER_PIN, NOTE_B5);
    delay(NOTE_CS1);
    tone(SPEAKER_PIN, NOTE_C5);
    delay(NOTE_CS1);
    tone(SPEAKER_PIN, NOTE_D5);
    delay(NOTE_CS1);
    tone(SPEAKER_PIN, NOTE_C5);
    delay(NOTE_CS1);
    tone(SPEAKER_PIN, NOTE_D5);
    delay(NOTE_CS1);
    tone(SPEAKER_PIN, NOTE_E5);
    delay(NOTE_CS1);
    tone(SPEAKER_PIN, NOTE_D5);
    delay(NOTE_CS1);
    tone(SPEAKER_PIN, NOTE_E5);
    delay(NOTE_CS1);
    tone(SPEAKER_PIN, NOTE_E5);
    delay(NOTE_CS1);
  }
  noTone(SPEAKER_PIN);
}



void MakeSadSound() {
  tone(SPEAKER_PIN, NOTE_G4);
  delay(250);
  tone(SPEAKER_PIN, NOTE_C4);
  delay(500);
  noTone(SPEAKER_PIN);
}
